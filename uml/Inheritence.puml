@startuml
'https://plantuml.com/class-diagram

abstract class AbstractFlyingObject
{
    # locationX:int
    # locationY:int
    # speedX:int
    # speedY:int
    # image:BufferedImage
    # width:int
    # height:int
    # isValid:boolean

    + AbstractFlyingObject(int locationX, int locationY, int speedX, int speedY)
    + forward():void
    + crash(AbstractFlyingObject flyingObject):boolean
    + setLocation(double locationX, double locationY):void
    + getLocationX():int
    + getLocationY():int
    + getSpeedY():int
    + getImage():BufferedImage
    + getWidth():int
    + getHeight():int
    + notValid():boolean
    + vanish():void
    }
abstract class AbstractAircraft
{
    -maxHp: int
    -hp: int
    -power: int
    -shootNum: int
    -direction: int
    -strategy: Strategy
	# maxHp:int
    # hp:int
    + AbstractAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
    + decreaseHp(int decrease):void
    + getHp():int
    + getMaxHp():int
    + getShootnum():int
    +getDirection():int
    + setMaxHp():void
    + getPower():int
    + {abstract} shoot():List<BaseBullet>
    + setStrategy(String str):void
 }

class HeroAircraft extends AbstractAircraft{
    - shootNum:int
    - power:int
    - direction:int
    -{static}instance:HeroAircraft
    - HeroAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + shoot():List<BaseBullet>
    +getinstance(int locationX, int locationY, int speedX, int speedY, int hp);
}




abstract class AbstractEnemy extends AbstractAircraft {
  - score: int
      -mode:int
      -time:int
     + AbstractEnemy(int locationX, int locationY, int speedX, int speedY, int hp,int mode,int time)
  + {abstract}adjustspeed(): void
  + getScore(): int
  + {abstract} createprop():void
  + {abstract} setMode(int mode):void
  + {abstract} update():void
}
class EliteEnemy extends AbstractEnemy {
    -{static}bloodfactory: BloodpropFactory
    -{static}bombfactory: BombpropFactory
    -{static}bulletfactory: BulletpropFactory
    -{static}bulletplusfactory: BulletpluspropFactory
  + EliteEnemy(locationX: int, locationY: int, speedX: int, speedY: int, hp: int,int mode,int time)
  + forward(): void
  + shoot(): List<BaseBullet>
    + update():void
}
class EliteplusEnemy extends AbstractEnemy {
    -{static}bloodfactory: BloodpropFactory
    -{static}bombfactory: BombpropFactory
    -{static}bulletfactory: BulletpropFactory
    -{static}bulletplusfactory: BulletpluspropFactory
  + EliteEnemy(locationX: int, locationY: int, speedX: int, speedY: int, hp: int,int mode,int time)
  + forward(): void
  + shoot(): List<BaseBullet>
      + update():void
}
class MobEnemy extends AbstractEnemy {
    -{static}bloodfactory: BloodpropFactory
    -{static}bombfactory: BombpropFactory
    -{static}bulletfactory: BulletpropFactory
    -{static}bulletplusfactory: BulletpluspropFactory
  + EliteEnemy(locationX: int, locationY: int, speedX: int, speedY: int, hp: int,int mode,int time)
  + forward(): void
  + shoot(): List<BaseBullet>
      + update():void
}

class BossEnemy extends AbstractEnemy{
-{static}bloodfactory: BloodpropFactory
    -{static}bombfactory: BombpropFactory
    -{static}bulletfactory: BulletpropFactory
    -{static}bulletplusfactory: BulletpluspropFactory
  + EliteEnemy(locationX: int, locationY: int, speedX: int, speedY: int, hp: int,int mode,int time)
  + forward(): void
  + shoot(): List<BaseBullet>
      + update():void
}
abstract class BaseBullet
{
    - power:int
    + BaseBullet(int locationX, int locationY, int speedX, int speedY, int power)
    + forward():void
	+ getPower():int
}
class HeroBullet extends BaseBullet{
    + HeroBullet(int locationX, int locationY,
     int speedX, int speedY, int power)
}

class EnemyBullet extends BaseBullet{
    + EnemyBullet(int locationX, int locationY,
     int speedX, int speedY, int power)
}

abstract class Baseprop {
#heroaircraft:Heroaircraft
+Baseprop(int locationX, int locationY, int speedX, int speedY):void
+forward():void
+{abstract}apply():void
}


class Bloodprop extends Baseprop{
- blood:int
+Bloodprop(int locationX, int locationY, int speedX, int speedY):void
+forward():void
+apply():void
}

class  Bombprop extends Baseprop{
-observers:List<Observer>
+ Bombprop(int locationX, int locationY, int speedX, int speedY):void
+forward():void
+apply():void
+registerObserver(Observer observer):void
+removeObserver(Observer observer):void
+notifyObserver():void
}

class  Bulletprop extends Baseprop{
 -{static}control:int
+  Bulletprop(int locationX, int locationY, int speedX, int speedY):void
+forward():void
+apply():void
}

class  Bulletplusprop extends Baseprop{
 -{static}control:int
+  Bulletplusprop(int locationX, int locationY, int speedX, int speedY):void
+forward():void
+apply():void
}

AbstractFlyingObject <|-- Baseprop
AbstractFlyingObject <|-- AbstractAircraft
AbstractFlyingObject <|-- BaseBullet

@enduml