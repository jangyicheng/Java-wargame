@startuml
'https://plantuml.com/class-diagram
title 工厂模式
'class HeroAircraft {
'    - shootNum:int
'    - power:int
'    - direction:int
'    -{static}instance:HeroAircraft
'    - HeroAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
'    + forward():void
'    + shoot():List<BaseBullet>
'    +getinstance(int locationX, int locationY, int speedX, int speedY, int hp);
'}


class PropFactory {
    - locationX: int
    - locationY: int
    - speedX: int
    - speedY: int
    - enemy: AbstractEnemy

    + PropFactory()
    + init(enemy: AbstractEnemy): void
    {abstract} + createprop(): Baseprop
}
class BulletpropFactory extends PropFactory{
    + createprop(): Bulletprop
}
class BulletpluspropFactory extends PropFactory{
    + createprop(): Bulletprop
}
class BloodpropFactory extends PropFactory{
    + createprop(): Bloodprop
}
class BombpropFactory extends PropFactory{
    + createprop(): Bombprop
}
abstract class Baseprop {
#heroaircraft:Heroaircraft
+Baseprop(int locationX, int locationY, int speedX, int speedY):void
+forward():void
+{abstract}apply():void
}


class Bloodprop extends Baseprop{
- blood:int
+Bloodprop(int locationX, int locationY, int speedX, int speedY):void
+forward():void
+apply():void
}

class  Bombprop extends Baseprop{
+ Bombprop(int locationX, int locationY, int speedX, int speedY):void
+forward():void
+apply():void
}


class  Bulletprop extends Baseprop{
+  Bulletprop(int locationX, int locationY, int speedX, int speedY):void
+forward():void
+apply():void
}

class  Bulletplusprop extends Baseprop{
+  Bulletplusprop(int locationX, int locationY, int speedX, int speedY):void
+forward():void
+apply():void
}


Baseprop <.. PropFactory
Bloodprop <.. BloodpropFactory:create
Bombprop <.. BombpropFactory:create
Bulletprop <.. BulletpropFactory:create
Bulletplusprop <.. BulletpluspropFactory:create








@enduml