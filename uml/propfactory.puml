@startuml
'https://plantuml.com/class-diagram
title 工厂模式


class PropFactory {
    - locationX: int
    - locationY: int
    - speedX: int
    - speedY: int
    - enemy: AbstractEnemy
    + PropFactory()
    + init(enemy: AbstractEnemy): void
    {abstract} + createprop(): Baseprop
}
class BulletpropFactory extends PropFactory{
    + createprop(): Bulletprop
}
class BulletpluspropFactory extends PropFactory{
    + createprop(): Bulletprop
}
class BloodpropFactory extends PropFactory{
    + createprop(): Bloodprop
}
class BombpropFactory extends PropFactory{
    + createprop(): Bombprop
}
abstract class Baseprop {
#heroaircraft:Heroaircraft
+Baseprop(int locationX, int locationY, int speedX, int speedY):void
+forward():void
+{abstract}apply():void
}


class Bloodprop extends Baseprop{
- blood:int
+Bloodprop(int locationX, int locationY, int speedX, int speedY):void
+forward():void
+apply():void
}

class  Bombprop extends Baseprop{
-observers:List<Observer>
+ Bombprop(int locationX, int locationY, int speedX, int speedY):void
+forward():void
+apply():void
+registerObserver(Observer observer):void
+removeObserver(Observer observer):void
+notifyObserver():void
}

class  Bulletprop extends Baseprop{
 -{static}control:int
+  Bulletprop(int locationX, int locationY, int speedX, int speedY):void
+forward():void
+apply():void
}

class  Bulletplusprop extends Baseprop{
 -{static}control:int
+  Bulletplusprop(int locationX, int locationY, int speedX, int speedY):void
+forward():void
+apply():void
}


Baseprop <.. PropFactory
Bloodprop <.. BloodpropFactory:create
Bombprop <.. BombpropFactory:create
Bulletprop <.. BulletpropFactory:create
Bulletplusprop <.. BulletpluspropFactory:create








@enduml