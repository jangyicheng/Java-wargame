@startuml
'https://plantuml.com/class-diagram
title 工厂模式
abstract class AbstractAircraft
{
    -maxHp: int
    -hp: int
    -power: int
    -shootNum: int
    -direction: int
    -strategy: Strategy
	# maxHp:int
    # hp:int
    + AbstractAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
    + decreaseHp(int decrease):void
    + getHp():int
    + getMaxHp():int
    + getShootnum():int
    +getDirection():int
    + getPower():int
    + {abstract} shoot():List<BaseBullet>
    + setStrategy(String str):void
 }

abstract class AbstractEnemy extends AbstractAircraft {
  - score: int
  + {abstract}adjustspeed(): void
  + getScore(): int
  + {abstract} createprop():void
}

class EliteEnemy extends AbstractEnemy {
    -{static}bloodfactory: BloodpropFactory
    -{static}bombfactory: BombpropFactory
    -{static}bulletfactory: BulletpropFactory
    -{static}bulletplusfactory: BulletpluspropFactory
  + EliteEnemy(locationX: int, locationY: int, speedX: int, speedY: int, hp: int)
  + forward(): void
  + shoot(): List<BaseBullet>
}
class EliteplusEnemy extends AbstractEnemy {
    -{static}bloodfactory: BloodpropFactory
    -{static}bombfactory: BombpropFactory
    -{static}bulletfactory: BulletpropFactory
    -{static}bulletplusfactory: BulletpluspropFactory
  + EliteEnemy(locationX: int, locationY: int, speedX: int, speedY: int, hp: int)
  + forward(): void
  + shoot(): List<BaseBullet>
}
class MobEnemy extends AbstractEnemy {
    -{static}bloodfactory: BloodpropFactory
    -{static}bombfactory: BombpropFactory
    -{static}bulletfactory: BulletpropFactory
    -{static}bulletplusfactory: BulletpluspropFactory
  + EliteEnemy(locationX: int, locationY: int, speedX: int, speedY: int, hp: int)
  + forward(): void
  + shoot(): List<BaseBullet>
}

class BossEnemy extends AbstractEnemy{
-{static}bloodfactory: BloodpropFactory
    -{static}bombfactory: BombpropFactory
    -{static}bulletfactory: BulletpropFactory
    -{static}bulletplusfactory: BulletpluspropFactory
  + EliteEnemy(locationX: int, locationY: int, speedX: int, speedY: int, hp: int)
  + forward(): void
  + shoot(): List<BaseBullet>
}

interface EnemyFactory {
    +createEnemy() : AbstractEnemy
}
class EliteEnemyFactory implements EnemyFactory{
    +createEnemy() : EliteEnemy
}
class MobEnemyFactory implements EnemyFactory{
    +createEnemy() : MobEnemy
}
class EliteplusEnemyFactory implements EnemyFactory{
    +createEnemy() : EliteplusEnemy
}
class BossEnemyFactory implements EnemyFactory{
    +createEnemy() : BossEnemy
}
AbstractEnemy<..EnemyFactory
EliteEnemy<.. EliteEnemyFactory:create
MobEnemy<.. MobEnemyFactory:create
@enduml